goal is to have a diagram of the class with dependencies:

statements or segments of code to be analysed:
	namespaces
	extends 
	interfaces 
	functions atributes
	functions return values

we don't care if a class is used in a function (yet) because:
1) we might have to dig too deep into the code for that to happen (what about macros and anonymous functions?)
2) we could use the "use" statement to get the hints from source


a list of of GENERAL operations I want to implement:

1) get the list of .php files from a directory (DONE as microtest)
2) get the content from a source (DONE)
3) read the file to create certain object types call "node" which should contain info on each php statement. (done by some cheating with GREP, is it over? as microtest)
4) get a list of all nodes from all sources (should be under a diagram object or some kind of collector)

anonymous functions to the rescue? this way I could split the filesystem scanner from the propper source reading and nodes collector.

5) resolve each node's link to others or orphans nodes
6) once I have the previous step, create a "tree" for each group of nodes.
7) "draw" internally how the diagram should look like.
	ie: 
	how many heads (parent classes)
	how deep will be  (levels of subclasses)
	how width (maximum number of subclases at the same deep level on a given class tree)
8) separate "trees" based on each others width. This involves creating some sort of grid.
9) create the diagram using straight arrows?
10) color the boxes based on namespace


20200514 0037 GMT-3 
what bothers me is the fact I'm taking some big steps and selecting the next test becomes hard. And the resulting code felt funny as if I was cheating. So I decided to go back a bit.


20200515 0026 GMT-3
renamed "clase" as "class_"
created "interface_"
Trying to apply the KISS rule, refactoring will show me the way later.




	
	